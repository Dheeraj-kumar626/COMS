#include <iostream>
#include <cstring>
#define MAX 500
using namespace std;
struct stacks
{
    int top;
    char elements[MAX];
};
void push(stacks& st,char x)
{
    if(st.top==MAX-1)
    {cout<<"stack overflow"<<endl;}
    else
    {st.elements[++st.top]=x;}
}
char pop(stacks& st)
{
    if(st.top==-1){return -1;}
    else
    {return st.elements[st.top--];}
}
char peep(stacks& st)
{
     if(st.top==-1){return -1;}
    else
    {return st.elements[st.top];}
}
bool is_operand(char x)
{
    return (((x>='0')&&(x<='9'))||((x>='a')&&(x<='z'))||((x>='A')&&(x<='Z')));
}
bool is_operator(char x)
{
    return ((x=='+')||(x=='-')||(x=='*')||(x=='/'));
}
int weight(char x)
{
    if((x=='+')||(x=='-'))
    {
        return 1;
    }
    else if((x=='*')||(x=='/'))
    {
        return 2;
    }
}
int main()
{
    stacks stk;
    stk.top=-1;
    char exp[100];
    char braces[2]={'(',')'};
    cout<<"enter one infix expression"<<endl;
    cin>>exp;
    int i=0;
     char z;
    while(i<=strlen(exp))
    {
        if(is_operand(exp[i]))
        {
            cout<<exp[i];
        }
        else if(is_operator(exp[i]))
        {
            if((stk.top==-1)||(stk.top==braces[0]))
            {
                push(stk,exp[i]);
            }
            else
            {
                while(weight(peep(stk))>=weight(exp[i]))
                {
                    cout<<pop(stk);
                }
                push(stk,exp[i]);
            }
        }
        else if((exp[i]==braces[0]))
        {
            push(stk,braces[0]);
        }
        else if((exp[i]==braces[1]))
        {

            z=pop(stk);
            while(z!=braces[0])
            {
                //z=pop(stk);
                cout<<z;
                z=pop(stk);
            }
        }
        i++;
    }
    while(stk.top!=-1)
    {
        cout<<pop(stk);
    }
    return 0;
}